<?xml version="1.0" encoding="utf-8" ?>
<project name="BuildInformation" default="go">
  <!-- Project UppercuT - http://projectuppercut.org -->
  <!-- DO NOT EDIT THIS FILE - This creates the assembly file to be used by the rest of the application - find out more at http://uppercut.pbwiki.com -->
  <property name="build.config.settings" value="__NONE__" overwrite="false" />
  <include buildfile="${build.config.settings}" if="${file::exists(build.config.settings)}" />
  <property name="path.separator" value="${string::trim(path::combine(' ', ' '))}" />
  <property name="file.current.no_extension" value="generateBuildInfo" />
  <property name="dirs.current" value="${directory::get-parent-directory(project::get-buildfile-path())}" />
  <property name="path.to.toplevel" value=".." />
  <property name="folder.build_scripts" value="build" overwrite="false" />
  <property name="folder.build_scripts_custom" value="build.custom" overwrite="false" />
  <property name="dirs.build_scripts_custom" value="${dirs.current}${path.separator}${path.to.toplevel}${path.separator}${folder.build_scripts_custom}" />
  <property name="folder.code_build" value="build_output" overwrite="false" />
  <property name="dirs.build" value="${dirs.current}${path.separator}${path.to.toplevel}${path.separator}${folder.code_build}" />
  <property name="file.build_info" value="${dirs.build}${path.separator}_BuildInfo.xml" />
  <property name="project.name" value="__SOLUTION_NAME_WITHOUT_SLN_EXTENSION__" overwrite="false" />
  <property name="company.name" value="__COMPANY_NAME__" overwrite="false" />
  <property name="version.use_semanticversioning" value="false" overwrite="false" />
  <property name="version.major" value="1" overwrite="false" />
  <property name="version.minor" value="0" overwrite="false" />
  <property name="version.patch" value="0" overwrite="false" />
  <property name="version.build" value="0" overwrite="false" />
  <property name="version.revision" value="0" overwrite="false" />
  <property name="version.full" value="${version.major}.${version.minor}.${version.build}.${version.revision}" />
  <property name="version.full" value="${version.major}.${version.minor}.${version.patch}.0" if="${version.use_semanticversioning}" />
  <property name="repository.path" value="__REPOSITORY_PATH__" overwrite="false" />
  <property name="microsoft.framework" value="net-3.5" overwrite="false" />
  <property name="msbuild.configuration" value="Release" overwrite="false" />
  <property name="msbuild.platform" value="Any CPU" overwrite="false" />
  <property name="version.uppercut" value="0" overwrite="false" />
  <property name="file.custom.step.before" value="${dirs.build_scripts_custom}${path.separator}${file.current.no_extension}.pre.step" />
  <property name="file.custom.step.after" value="${dirs.build_scripts_custom}${path.separator}${file.current.no_extension}.post.step" />
  <property name="file.custom.step.replace" value="${dirs.build_scripts_custom}${path.separator}${file.current.no_extension}.replace.step" />
  <property name="is.replaced" value="false" />
  <property name="fail.build.on.error" value="false" />

  <target name="go" depends="run_tasks" />

  <target name="run_tasks">
    <echo message="Running ${project::get-name()} tasks." />
    <call target="prepare" if="${target::exists('prepare')}" />
    <call target="custom_tasks_before" if="${target::exists('custom_tasks_before')}"  />
    <call target="custom_tasks_replace" if="${target::exists('custom_tasks_replace')}"  />
    <call target="run_normal_tasks" if="${not is.replaced}" />
    <call target="custom_tasks_after" if="${target::exists('custom_tasks_after')}" />
  </target>

  <target name="run_normal_tasks"
          depends="generate_build_info_file"
          description="Generating Build Information File." />

  <target name="custom_tasks_before">
    <echo message="Running custom tasks if ${file.custom.step.before} exists." />
    <nant buildfile="${file.custom.step.before}" inheritall="true" if="${file::exists(file.custom.step.before)}" failonerror="${fail.build.on.error}" />
    <exec program="powershell.exe" if="${file::exists(file.custom.step.before + '.ps1')}" failonerror="${fail.build.on.error}">
      <arg value="${path::get-full-path(file.custom.step.before + '.ps1')}" />
    </exec>
    <exec program="ruby.exe" if="${file::exists(file.custom.step.before + '.rb')}" failonerror="${fail.build.on.error}">
      <arg value="${path::get-full-path(file.custom.step.before + '.rb')}" />
    </exec>
  </target>

  <target name="custom_tasks_replace">
    <echo message="Running custom tasks instead of normal tasks if ${file.custom.step.replace} exists." />
    <property name="is.replaced" value="true" if="${file::exists(file.custom.step.replace)}" />
    <nant buildfile="${file.custom.step.replace}" inheritall="true" if="${file::exists(file.custom.step.replace)}" failonerror="${fail.build.on.error}" />
    <property name="is.replaced" value="true" if="${file::exists(file.custom.step.replace + '.ps1')}" />
    <exec program="powershell.exe" if="${file::exists(file.custom.step.replace + '.ps1')}" failonerror="${fail.build.on.error}" >
      <arg value="${path::get-full-path(file.custom.step.replace + '.ps1')}" />
    </exec>
    <property name="is.replaced" value="true" if="${file::exists(file.custom.step.replace + '.rb')}" />
    <exec program="ruby.exe" if="${file::exists(file.custom.step.replace + '.rb')}" failonerror="${fail.build.on.error}" >
      <arg value="${path::get-full-path(file.custom.step.replace + '.rb')}" />
    </exec>
  </target>

  <target name="generate_build_info_file">
    <echo message="Generating XML file with some information to possibly get merged in at ${file.build_info}."/>
    <echo file="${file.build_info}" append="false" failonerror="false">
      <![CDATA[<?xml version="1.0" ?>
<buildInfo>
  <projectName>${project.name}</projectName>
  <companyName>${string::replace(string::replace(company.name,'&amp;','&'),'&','&amp;')}</companyName>
  <versionMajor>${version.major}</versionMajor>
  <versionMinor>${version.minor}</versionMinor>
  <versionPatch>${version.patch}</versionPatch>
  <buildNumber>${version.build}</buildNumber>
  <revision>${version.revision}</revision>
  <version>${version.full}</version>
  <repositoryPath>${repository.path}</repositoryPath>
  <microsoftNetFramework>${microsoft.framework}</microsoftNetFramework>
  <msbuildConfiguration>${msbuild.configuration}</msbuildConfiguration>
  <msbuildPlatform>${msbuild.platform}</msbuildPlatform>
  <builtWith>UppercuT v. ${version.uppercut}</builtWith>
</buildInfo>]]>
    </echo>
  </target>

  <target name="custom_tasks_after">
    <echo message="Running custom tasks if ${file.custom.step.after} exists." />
    <nant buildfile="${file.custom.step.after}" inheritall="true" if="${file::exists(file.custom.step.after)}" failonerror="${fail.build.on.error}" />
    <exec program="powershell.exe" if="${file::exists(file.custom.step.after + '.ps1')}" failonerror="${fail.build.on.error}" >
      <arg value="${path::get-full-path(file.custom.step.after + '.ps1')}" />
    </exec>
    <exec program="ruby.exe" if="${file::exists(file.custom.step.after + '.rb')}" failonerror="${fail.build.on.error}" >
      <arg value="${path::get-full-path(file.custom.step.after + '.rb')}" />
    </exec>
  </target>

</project>